import click
from click import echo, secho, style
from datetime import datetime, timedelta
from scbs.scbs import _get_filepath, profile, prepare, smooth
from click_help_colors import HelpColorsGroup, HelpColorsCommand


class Timer(object):
    def __init__(self, label="run", fmt="%a %b %d %H:%M:%S %Y"):
        self.label = style(label, bold=True)
        self.fmt = fmt
        self.begin_time = datetime.now()
        echo(f"\nStarted {self.label} on {self.begin_time.strftime(self.fmt)}.")
        return

    def stop(self):
        end_time = datetime.now()
        runtime = timedelta(seconds=(end_time - self.begin_time).seconds)
        echo(
            f"\nFinished {self.label} on {end_time.strftime(self.fmt)}. "
            f"Total runtime was {runtime} (hour:min:s)."
        )
        return


def _print_kwargs(kwargs):
    echo("\nCommand line arguments:")
    for arg, value in kwargs.items():
        if value is not None:
            value_fmt = style(str(_get_filepath(value)), fg="blue")
            echo(f"{arg: >15}: {value_fmt}")
    echo()


# command group
@click.group(
    cls=HelpColorsGroup,
    help_headers_color="bright_white",
    help_options_color="green",
    help=f"""
        Below you find a list of all available commands.
        To find out what they do and how to use them, check
        their help like this:

        {style("scbs profile --help", fg="blue")}
        
        To use stdin or stdout, use the character
        {style("-", fg="blue")} instead of a file path.
        """,
)
@click.version_option()
def cli():
    pass


# prepare command
@cli.command(
    name="prepare",
    help=f"""
    Gathers single cell methylation data from multiple input files
    (one per cell) and creates a sparse matrix (position x cell) in CSR
    format for each chromosome. Methylated sites are represented by a 1,
    unmethylated sites are -1, missing values and other bases are 0.

    {style("INPUT_FILES", fg="green")} are tab-separated single cell
    methylation files, for example '.cov'-files generated by Bismark.

    {style("DATA_DIR", fg="green")} is the output directory
    where the methylation data will be stored.
    """,
    short_help="First step: Collect and store sc-methylation data for quick access",
    no_args_is_help=True,
)
@click.argument("input-files", type=click.File("rb"), nargs=-1)
@click.argument(
    "data-dir",
    type=click.Path(dir_okay=True, file_okay=False, writable=True),
)
@click.option(
    "--input-format",
    default=(1, 2, 5, 6),
    nargs=4,
    metavar="<INT INT INT INT>",
    help="""
    Specify the format of the input files using four numbers.
    Numbers denote in which column the chromosome name, genomic position,
    methylated counts and unmethylated counts are stored; e.g. the
    default '--format 1 2 5 6' (Bismark's '.cov' format) denotes that the
    first column (1-indexed) contains the chromosome name, the 5th column
    contains the methylated counts etc.""",
)
@click.option(
    "--header",
    is_flag=True,
    help="Use this when input files have a column header [default: off, not "
    "required when using Bismark files]",
)
def matrix_cli(**kwargs):
    timer = Timer(label="prepare")
    _print_kwargs(kwargs)
    prepare(**kwargs)
    timer.stop()


# profile command
@cli.command(
    name="profile",
    help=f"""
    From single cell methylation or NOMe-seq data,
    calculates the average methylation profile of a set of
    genomic regions. Useful for plotting and visually comparing
    methylation between groups of regions or cells.

    {style("REGIONS", fg="green")} is an alphabetically sorted (!) .bed file of regions
    for which the methylation profile will be produced.

    {style("DATA_DIR", fg="green")} is the directory containing the methylation matrices
    produced by running 'scbs matrix'.

    {style("OUTPUT", fg="green")} is the file path where the methylation profile data
    will be written. Should end with '.csv'.
    """,
    short_help="Plot mean methylation around a group of genomic features",
    no_args_is_help=True,
)
@click.argument("regions", type=click.File("r"))
@click.argument(
    "data-dir",
    type=click.Path(exists=True, dir_okay=True, file_okay=False, readable=True),
)
@click.argument("output", type=click.File("w"))
@click.option(
    "--width",
    default=4000,
    show_default=True,
    type=click.IntRange(min=1, max=None),
    metavar="INTEGER",
    help="The total width of the profile plot in bp. "
    "The center of all bed regions will be "
    "extended in both directions by half of this amount. "
    "Shorter regions will be extended, longer regions "
    "will be shortened accordingly.",
)
@click.option(
    "--strand-column",
    type=click.IntRange(min=1, max=None),
    metavar="INTEGER",
    help="The bed column number (1-indexed) denoting "
    "the DNA strand of the region  [optional].",
)
@click.option(
    "--label",
    help="Specify a constant value to be added as a "
    "column to the output table. This can be "
    "useful to give each output a unique label when "
    "you want to concatenate multiple outputs  [optional].",
)
def profile_cli(**kwargs):
    timer = Timer(label="profile")
    _print_kwargs(kwargs)
    profile(**kwargs)
    timer.stop()


# smooth command
@cli.command(
    name="smooth",
    help=f"""
    This script will calculate the smoothed mean methylation over the
    whole genome.

    {style("DATA_DIR", fg="green")} is the directory containing the methylation matrices
    produced by running 'scbs matrix'.

    The smoothed methylation values will be written to 
    {style("DATA_DIR/smoothed.json", fg="green")}.
    """,
    short_help="Smooth sc-methylation data",
    no_args_is_help=True,
)
@click.argument(
    "data-dir",
    type=click.Path(exists=True, dir_okay=True, file_okay=False, readable=True, writable=True),
)
@click.option(
    "-bw", "--bandwidth",
    default=1000,
    type=click.IntRange(min=1, max=1e6),
    metavar="INTEGER",
    show_default=True,
    help="Smoothing bandwidth.",
)
@click.option("--use-weights", is_flag=True,
    help="Use this to weigh CpGs by log1p(coverage).")
def smooth_cli(**kwargs):
    timer = Timer(label="smooth")
    _print_kwargs(kwargs)
    smooth(**kwargs)
    timer.stop()


# CLI template:
@click.command(
    help=f"""
    Blabla

    {style("INPUT", fg="green")} blabla

    {style("OUTPUT", fg="green")} blabla
    """,
    short_help="template for dev",
)
@click.argument("input", type=click.File("r"))
@click.argument("output", type=click.File("w"))
@click.option("-o", "--option", type=int, default=4, show_default=True)
@click.option("--flag", is_flag=True)
def template(**kwargs):
    timer = Timer(label="template")
    _print_kwargs(kwargs)
    print(**kwargs)
    timer.stop()


# cli.add_command(matrix_cli, name="matrix")
# cli.add_command(profile_cli, name="profile")
